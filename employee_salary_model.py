# -*- coding: utf-8 -*-
"""employee_salary_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xnIT6eYL_tMWXwtVpa24P7y0z_x6zixg

TASK #1: UNDERSTAND THE PROBLEM STATEMENT

Day 2 streamlit workshop:
This is a model built during Day3's class. I typed these codes following guides. I think it's suitable for deploying.
The objective of this case study is to predict the employee salary based on the number of years of experience.
In simple linear regression, we predict the value of one variable Y based on another variable X.
X is called the independent variable and Y is called the dependant variable.
Why simple? Because it examines relationship between two variables only.
Why linear? when the independent variable increases (or decreases), the dependent variable increases (or decreases) in a linear fashion.

TASK #2: IMPORT LIBRARIES AND DATASETS
"""
import subprocess

subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
#install libraries
#pip install seaborn
#pip install tensorflow
#pip install pandas
#pip install numpy
#pip install matplotlib
#pip install -r requirements.txt

import tensorflow as tf
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# read the csv file
salary_df = pd.read_csv('salary.csv')

salary_df

"""MINI CHALLENGE

Use head and tail methods to print the first and last 7 rows of the dataframe
Try to find the maximum salary value in the dataframe
"""

salary_df.head(7)

salary_df['Salary'].max()

"""TASK #3: PERFORM EXPLORATORY DATA ANALYSIS AND VISUALIZATION"""

# check if there are any Null values
sns.heatmap(salary_df.isnull(), yticklabels = False, cbar = False, cmap="Blues")

# Check the dataframe info

salary_df.info()

# Statistical summary of the dataframe

salary_df.describe()

"""MINI CHALLENGE

What are the number of years of experience corresponding to employees with minimum and maximim salaries?
"""

max = salary_df[ salary_df['Salary'] == salary_df['Salary'].max()]
max

min = salary_df[ salary_df['Salary'] == salary_df['Salary'].min()]
min

salary_df.hist(bins = 30, figsize = (20,10), color = 'r')

# plot pairplot
sns.pairplot(salary_df)

corr_metrix=salary_df.corr()
sns.heatmap(corr_metrix,annot=True)
plt.show()

"""MINI CHALLENGE

Use regplot in Seaborn to obtain a straight line fit between "salary" and "years of experience"
"""

sns.regplot(x='YearsExperience',y='Salary',data=salary_df)

"""TASK #4: CREATE TRAINING AND TESTING DATASET"""



X=salary_df[['YearsExperience']]
Y=salary_df[['Salary']]

X

Y

X.shape

Y.shape

X=np.array(X).astype('float32')

Y=np.array(Y).astype('float32')

# Only take the numerical variables and scale them
X

# split the data into test and train sets
# generalize data not memorizing data 0.2 20% testing  0.8 80% training
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2)

"""MINI CHALLENGE
 - Try splitting the data into 75% for training and the rest for testing
 - Verify that the split was successful by obtaining the shape of both X_train and X_test
 - Did you notice any change in the order of the data? why?
"""

#X=X.reshape(-1,1)

#Y

#Y=Y.reshape(-1,1)

#from sklearn.model_selection import train_test_split

#X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.25)

X_train.shape

X_test.shape

Y_train.shape

Y_test.shape

X_test

"""TASK #5: TRAIN A LINEAR REGRESSION MODEL IN SK-LEARN (NOTE THAT SAGEMAKER BUILT-IN ALGORITHMS ARE NOT USED HERE)"""

# using linear regression model
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, accuracy_score

regresssion_model_sklearn = LinearRegression(fit_intercept = True)
regresssion_model_sklearn.fit(X_train, Y_train)

"""n a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook.
On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.
"""

regresssion_model_sklearn_accuracy = regresssion_model_sklearn.score(X_test, Y_test)
regresssion_model_sklearn_accuracy

#regression_model_sklearn_accuracy=regression_model_sklearn.score(X_test,Y_test)

#regression_model_sklearn_accuracy

print('Linear Model Coefficient (m): ', regresssion_model_sklearn.coef_)
print('Linear Model Coefficient (b): ', regresssion_model_sklearn.intercept_)

#print('Linear Model intercept(b):',regression_model_sklearn.interncept_)

"""MINI CHALLENGE

Retrain the model while setting the fit_intercept = False, what do you notice?
"""

# using linear regression model
#from sklearn.linear_model import LinearRegression
#from sklearn.metrics import mean_squared_error, accuracy_score

#regresssion_model_sklearn = LinearRegression(fit_intercept = False)
#regresssion_model_sklearn.fit(X_train, y_train)

"""LinearRegression(fit_intercept=False)
In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook.
On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.
"""

# evaluate my model
regresssion_model_sklearn_accuracy = regresssion_model_sklearn.score(X_test, Y_test)
regresssion_model_sklearn_accuracy

# slope start to change
print('Linear Model Coefficient (m): ', regresssion_model_sklearn.coef_)
print('Linear Model Coefficient (b): ', regresssion_model_sklearn.intercept_)

"""TASK #6: EVALUATE TRAINED MODEL PERFORMANCE (NOTE THAT SAGEMAKER BUILT-IN ALGORITHMS ARE NOT USED HERE)Â¶"""

y_predict = regresssion_model_sklearn.predict(X_test)#y_predict=regression_model_sklearn.predict(X_test)

y_predict

plt.scatter(X_train, Y_train, color = 'gray')
plt.plot(X_train, regresssion_model_sklearn.predict(X_train), color = 'red')#it uses 3 s
plt.ylabel('Salary')
plt.xlabel('Number of Years of Experience')
plt.title('Salary vs. Years of Experience')

"""plt.scatter(X_train,Y_train,color='gray')
plt.plot(X_train,regression_model_sklearn.predict(X_train),color='red')
plt.ylabel("Salary")
plt.xlabel("Number of years of Experiences")
plt.title("Salary vs Experience")

MINI CHALLENGE
 - Use the trained model, obtain the salary corresponding to employees who have years of experience = 5
"""

num_years_exp = [[5]]

salary=regresssion_model_sklearn.predict(num_years_exp)

salary
